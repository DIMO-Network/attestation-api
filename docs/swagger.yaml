definitions:
  github_com_DIMO-Network_attestation-api_pkg_verifiable.Credential:
    properties:
      '@context':
        items:
          type: string
        type: array
      credentialStatus:
        $ref: '#/definitions/github_com_DIMO-Network_attestation-api_pkg_verifiable.CredentialStatus'
      credentialSubject:
        items:
          type: integer
        type: array
      id:
        type: string
      issuer:
        type: string
      proof:
        $ref: '#/definitions/github_com_DIMO-Network_attestation-api_pkg_verifiable.Proof'
      type:
        items:
          type: string
        type: array
      validFrom:
        type: string
      validTo:
        type: string
    type: object
  github_com_DIMO-Network_attestation-api_pkg_verifiable.CredentialStatus:
    properties:
      id:
        type: string
      statusListCredential:
        type: string
      statusListIndex:
        type: integer
      statusPurpose:
        type: string
      type:
        type: string
    type: object
  github_com_DIMO-Network_attestation-api_pkg_verifiable.MultiKey:
    properties:
      controller:
        type: string
      id:
        type: string
      publicKeyMultibase:
        type: string
      type:
        type: string
    type: object
  github_com_DIMO-Network_attestation-api_pkg_verifiable.Proof:
    properties:
      created:
        type: string
      cryptosuite:
        type: string
      proofPurpose:
        type: string
      proofValue:
        type: string
      type:
        type: string
      verificationMethod:
        type: string
    type: object
  github_com_DIMO-Network_attestation-api_pkg_verifiable.VerificationControlDocument:
    properties:
      '@context':
        items:
          type: string
        type: array
      assertionMethod:
        items:
          type: string
        type: array
      authentication:
        items:
          type: string
        type: array
      capabilityDelegation:
        items:
          type: string
        type: array
      capabilityInvocation:
        items:
          type: string
        type: array
      id:
        type: string
      verificationMethod:
        items:
          $ref: '#/definitions/github_com_DIMO-Network_attestation-api_pkg_verifiable.MultiKey'
        type: array
    type: object
  internal_controllers_httphandlers.getVINVCResponse:
    properties:
      message:
        type: string
      vcQuery:
        type: string
      vcUrl:
        type: string
    type: object
info:
  contact: {}
  title: DIMO Attestation API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
  /v1/vc/keys:
    get:
      consumes:
      - application/json
      description: Returns the public key document for verifying VCs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_DIMO-Network_attestation-api_pkg_verifiable.VerificationControlDocument'
      summary: Get verification control document
      tags:
      - VINVC
  /v1/vc/status/{group}:
    get:
      consumes:
      - application/json
      description: Get the VC status for a given status group (currently this is just
        the vehcilesTokenId)
      parameters:
      - description: status list group
        in: path
        name: group
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_DIMO-Network_attestation-api_pkg_verifiable.Credential'
      summary: Get VC Status
      tags:
      - VINVC
  /v1/vc/vin/{tokenId}:
    get:
      consumes:
      - application/json
      description: Get the VIN VC for a given token Id of a vehicle NFT. If a unexpired
        VC is not found, a new VC is generated.
      parameters:
      - description: token Id of the vehicle NFT
        in: path
        name: tokenId
        required: true
        type: integer
      - description: force generation of a new VC even if an unexpired VC exists
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_controllers_httphandlers.getVINVCResponse'
      security:
      - BearerAuth: []
      summary: Get VIN VC
      tags:
      - VINVC
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
