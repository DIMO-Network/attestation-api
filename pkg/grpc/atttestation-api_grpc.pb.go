// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/grpc/atttestation-api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttestationService_EnsureVinVc_FullMethodName         = "/grpc.AttestationService/EnsureVinVc"
	AttestationService_GetVinVcLatest_FullMethodName      = "/grpc.AttestationService/GetVinVcLatest"
	AttestationService_TestVinVcCreation_FullMethodName   = "/grpc.AttestationService/TestVinVcCreation"
	AttestationService_ManualVinVcCreation_FullMethodName = "/grpc.AttestationService/ManualVinVcCreation"
)

// AttestationServiceClient is the client API for AttestationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestationServiceClient interface {
	EnsureVinVc(ctx context.Context, in *EnsureVinVcRequest, opts ...grpc.CallOption) (*EnsureVinVcResponse, error)
	GetVinVcLatest(ctx context.Context, in *GetLatestVinVcRequest, opts ...grpc.CallOption) (*GetLatestVinVcResponse, error)
	TestVinVcCreation(ctx context.Context, in *TestVinVcCreationRequest, opts ...grpc.CallOption) (*TestVinVcCreationResponse, error)
	ManualVinVcCreation(ctx context.Context, in *ManualVinVcCreationRequest, opts ...grpc.CallOption) (*ManualVinVcCreationResponse, error)
}

type attestationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationServiceClient(cc grpc.ClientConnInterface) AttestationServiceClient {
	return &attestationServiceClient{cc}
}

func (c *attestationServiceClient) EnsureVinVc(ctx context.Context, in *EnsureVinVcRequest, opts ...grpc.CallOption) (*EnsureVinVcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnsureVinVcResponse)
	err := c.cc.Invoke(ctx, AttestationService_EnsureVinVc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationServiceClient) GetVinVcLatest(ctx context.Context, in *GetLatestVinVcRequest, opts ...grpc.CallOption) (*GetLatestVinVcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestVinVcResponse)
	err := c.cc.Invoke(ctx, AttestationService_GetVinVcLatest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationServiceClient) TestVinVcCreation(ctx context.Context, in *TestVinVcCreationRequest, opts ...grpc.CallOption) (*TestVinVcCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestVinVcCreationResponse)
	err := c.cc.Invoke(ctx, AttestationService_TestVinVcCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationServiceClient) ManualVinVcCreation(ctx context.Context, in *ManualVinVcCreationRequest, opts ...grpc.CallOption) (*ManualVinVcCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManualVinVcCreationResponse)
	err := c.cc.Invoke(ctx, AttestationService_ManualVinVcCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationServiceServer is the server API for AttestationService service.
// All implementations must embed UnimplementedAttestationServiceServer
// for forward compatibility.
type AttestationServiceServer interface {
	EnsureVinVc(context.Context, *EnsureVinVcRequest) (*EnsureVinVcResponse, error)
	GetVinVcLatest(context.Context, *GetLatestVinVcRequest) (*GetLatestVinVcResponse, error)
	TestVinVcCreation(context.Context, *TestVinVcCreationRequest) (*TestVinVcCreationResponse, error)
	ManualVinVcCreation(context.Context, *ManualVinVcCreationRequest) (*ManualVinVcCreationResponse, error)
	mustEmbedUnimplementedAttestationServiceServer()
}

// UnimplementedAttestationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttestationServiceServer struct{}

func (UnimplementedAttestationServiceServer) EnsureVinVc(context.Context, *EnsureVinVcRequest) (*EnsureVinVcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureVinVc not implemented")
}
func (UnimplementedAttestationServiceServer) GetVinVcLatest(context.Context, *GetLatestVinVcRequest) (*GetLatestVinVcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinVcLatest not implemented")
}
func (UnimplementedAttestationServiceServer) TestVinVcCreation(context.Context, *TestVinVcCreationRequest) (*TestVinVcCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestVinVcCreation not implemented")
}
func (UnimplementedAttestationServiceServer) ManualVinVcCreation(context.Context, *ManualVinVcCreationRequest) (*ManualVinVcCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualVinVcCreation not implemented")
}
func (UnimplementedAttestationServiceServer) mustEmbedUnimplementedAttestationServiceServer() {}
func (UnimplementedAttestationServiceServer) testEmbeddedByValue()                            {}

// UnsafeAttestationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestationServiceServer will
// result in compilation errors.
type UnsafeAttestationServiceServer interface {
	mustEmbedUnimplementedAttestationServiceServer()
}

func RegisterAttestationServiceServer(s grpc.ServiceRegistrar, srv AttestationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAttestationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AttestationService_ServiceDesc, srv)
}

func _AttestationService_EnsureVinVc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureVinVcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).EnsureVinVc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_EnsureVinVc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).EnsureVinVc(ctx, req.(*EnsureVinVcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationService_GetVinVcLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestVinVcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).GetVinVcLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_GetVinVcLatest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).GetVinVcLatest(ctx, req.(*GetLatestVinVcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationService_TestVinVcCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestVinVcCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).TestVinVcCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_TestVinVcCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).TestVinVcCreation(ctx, req.(*TestVinVcCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationService_ManualVinVcCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualVinVcCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).ManualVinVcCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_ManualVinVcCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).ManualVinVcCreation(ctx, req.(*ManualVinVcCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttestationService_ServiceDesc is the grpc.ServiceDesc for AttestationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttestationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AttestationService",
	HandlerType: (*AttestationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureVinVc",
			Handler:    _AttestationService_EnsureVinVc_Handler,
		},
		{
			MethodName: "GetVinVcLatest",
			Handler:    _AttestationService_GetVinVcLatest_Handler,
		},
		{
			MethodName: "TestVinVcCreation",
			Handler:    _AttestationService_TestVinVcCreation_Handler,
		},
		{
			MethodName: "ManualVinVcCreation",
			Handler:    _AttestationService_ManualVinVcCreation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/atttestation-api.proto",
}
