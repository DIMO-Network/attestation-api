// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=interfaces_mock_test.go -package=vc_test
//

// Package vc_test is a generated GoMock package.
package vc_test

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	models "github.com/DIMO-Network/attestation-api/pkg/models"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockVCService is a mock of VCService interface.
type MockVCService struct {
	ctrl     *gomock.Controller
	recorder *MockVCServiceMockRecorder
}

// MockVCServiceMockRecorder is the mock recorder for MockVCService.
type MockVCServiceMockRecorder struct {
	mock *MockVCService
}

// NewMockVCService creates a new mock instance.
func NewMockVCService(ctrl *gomock.Controller) *MockVCService {
	mock := &MockVCService{ctrl: ctrl}
	mock.recorder = &MockVCServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCService) EXPECT() *MockVCServiceMockRecorder {
	return m.recorder
}

// GenerateAndStoreVINVC mocks base method.
func (m *MockVCService) GenerateAndStoreVINVC(ctx context.Context, tokenID uint32, vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndStoreVINVC", ctx, tokenID, vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateAndStoreVINVC indicates an expected call of GenerateAndStoreVINVC.
func (mr *MockVCServiceMockRecorder) GenerateAndStoreVINVC(ctx, tokenID, vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndStoreVINVC", reflect.TypeOf((*MockVCService)(nil).GenerateAndStoreVINVC), ctx, tokenID, vin)
}

// GenerateStatusVC mocks base method.
func (m *MockVCService) GenerateStatusVC(tokenID uint32) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateStatusVC", tokenID)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateStatusVC indicates an expected call of GenerateStatusVC.
func (mr *MockVCServiceMockRecorder) GenerateStatusVC(tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateStatusVC", reflect.TypeOf((*MockVCService)(nil).GenerateStatusVC), tokenID)
}

// GetLatestVC mocks base method.
func (m *MockVCService) GetLatestVC(ctx context.Context, tokenID uint32) (*models.VINVC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVC", ctx, tokenID)
	ret0, _ := ret[0].(*models.VINVC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVC indicates an expected call of GetLatestVC.
func (mr *MockVCServiceMockRecorder) GetLatestVC(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVC", reflect.TypeOf((*MockVCService)(nil).GetLatestVC), ctx, tokenID)
}

// MockIdentityService is a mock of IdentityService interface.
type MockIdentityService struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityServiceMockRecorder
}

// MockIdentityServiceMockRecorder is the mock recorder for MockIdentityService.
type MockIdentityServiceMockRecorder struct {
	mock *MockIdentityService
}

// NewMockIdentityService creates a new mock instance.
func NewMockIdentityService(ctrl *gomock.Controller) *MockIdentityService {
	mock := &MockIdentityService{ctrl: ctrl}
	mock.recorder = &MockIdentityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityService) EXPECT() *MockIdentityServiceMockRecorder {
	return m.recorder
}

// GetPairedDevices mocks base method.
func (m *MockIdentityService) GetPairedDevices(ctx context.Context, tokenID uint32) ([]models.PairedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairedDevices", ctx, tokenID)
	ret0, _ := ret[0].([]models.PairedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairedDevices indicates an expected call of GetPairedDevices.
func (mr *MockIdentityServiceMockRecorder) GetPairedDevices(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairedDevices", reflect.TypeOf((*MockIdentityService)(nil).GetPairedDevices), ctx, tokenID)
}

// MockFingerprintService is a mock of FingerprintService interface.
type MockFingerprintService struct {
	ctrl     *gomock.Controller
	recorder *MockFingerprintServiceMockRecorder
}

// MockFingerprintServiceMockRecorder is the mock recorder for MockFingerprintService.
type MockFingerprintServiceMockRecorder struct {
	mock *MockFingerprintService
}

// NewMockFingerprintService creates a new mock instance.
func NewMockFingerprintService(ctrl *gomock.Controller) *MockFingerprintService {
	mock := &MockFingerprintService{ctrl: ctrl}
	mock.recorder = &MockFingerprintServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFingerprintService) EXPECT() *MockFingerprintServiceMockRecorder {
	return m.recorder
}

// GetLatestFingerprintMessages mocks base method.
func (m *MockFingerprintService) GetLatestFingerprintMessages(ctx context.Context, pairedDeviceAddr common.Address) (*models.FingerprintMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestFingerprintMessages", ctx, pairedDeviceAddr)
	ret0, _ := ret[0].(*models.FingerprintMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestFingerprintMessages indicates an expected call of GetLatestFingerprintMessages.
func (mr *MockFingerprintServiceMockRecorder) GetLatestFingerprintMessages(ctx, pairedDeviceAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestFingerprintMessages", reflect.TypeOf((*MockFingerprintService)(nil).GetLatestFingerprintMessages), ctx, pairedDeviceAddr)
}

// MockVINService is a mock of VINService interface.
type MockVINService struct {
	ctrl     *gomock.Controller
	recorder *MockVINServiceMockRecorder
}

// MockVINServiceMockRecorder is the mock recorder for MockVINService.
type MockVINServiceMockRecorder struct {
	mock *MockVINService
}

// NewMockVINService creates a new mock instance.
func NewMockVINService(ctrl *gomock.Controller) *MockVINService {
	mock := &MockVINService{ctrl: ctrl}
	mock.recorder = &MockVINServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVINService) EXPECT() *MockVINServiceMockRecorder {
	return m.recorder
}

// ValidateVIN mocks base method.
func (m *MockVINService) ValidateVIN(ctx context.Context, vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVIN", ctx, vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVIN indicates an expected call of ValidateVIN.
func (mr *MockVINServiceMockRecorder) ValidateVIN(ctx, vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVIN", reflect.TypeOf((*MockVINService)(nil).ValidateVIN), ctx, vin)
}
