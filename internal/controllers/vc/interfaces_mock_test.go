// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=interfaces_mock_test.go -package=vc
//

// Package vc is a generated GoMock package.
package vc_test

import (
	reflect "reflect"

	models "github.com/DIMO-Network/attestation-api/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockVCService is a mock of VCService interface.
type MockVCService struct {
	ctrl     *gomock.Controller
	recorder *MockVCServiceMockRecorder
}

// MockVCServiceMockRecorder is the mock recorder for MockVCService.
type MockVCServiceMockRecorder struct {
	mock *MockVCService
}

// NewMockVCService creates a new mock instance.
func NewMockVCService(ctrl *gomock.Controller) *MockVCService {
	mock := &MockVCService{ctrl: ctrl}
	mock.recorder = &MockVCServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCService) EXPECT() *MockVCServiceMockRecorder {
	return m.recorder
}

// GenerateAndStoreVC mocks base method.
func (m *MockVCService) GenerateAndStoreVC(vcUUID string, tokenID uint32, aftermarketTokenID, syntheticTokenID *uint32, vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndStoreVC", vcUUID, tokenID, aftermarketTokenID, syntheticTokenID, vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateAndStoreVC indicates an expected call of GenerateAndStoreVC.
func (mr *MockVCServiceMockRecorder) GenerateAndStoreVC(vcUUID, tokenID, aftermarketTokenID, syntheticTokenID, vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndStoreVC", reflect.TypeOf((*MockVCService)(nil).GenerateAndStoreVC), vcUUID, tokenID, aftermarketTokenID, syntheticTokenID, vin)
}

// RevokeExistingVCForToken mocks base method.
func (m *MockVCService) RevokeExistingVCForToken(tokenID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeExistingVCForToken", tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeExistingVCForToken indicates an expected call of RevokeExistingVCForToken.
func (mr *MockVCServiceMockRecorder) RevokeExistingVCForToken(tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeExistingVCForToken", reflect.TypeOf((*MockVCService)(nil).RevokeExistingVCForToken), tokenID)
}

// RevokeExistingVCForVIN mocks base method.
func (m *MockVCService) RevokeExistingVCForVIN(vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeExistingVCForVIN", vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeExistingVCForVIN indicates an expected call of RevokeExistingVCForVIN.
func (mr *MockVCServiceMockRecorder) RevokeExistingVCForVIN(vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeExistingVCForVIN", reflect.TypeOf((*MockVCService)(nil).RevokeExistingVCForVIN), vin)
}

// RevokeVCsForPairedDevices mocks base method.
func (m *MockVCService) RevokeVCsForPairedDevices(pairedDevices []models.PairedDevice, tokenID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeVCsForPairedDevices", pairedDevices, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeVCsForPairedDevices indicates an expected call of RevokeVCsForPairedDevices.
func (mr *MockVCServiceMockRecorder) RevokeVCsForPairedDevices(pairedDevices, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeVCsForPairedDevices", reflect.TypeOf((*MockVCService)(nil).RevokeVCsForPairedDevices), pairedDevices, tokenID)
}

// MockIdentityService is a mock of IdentityService interface.
type MockIdentityService struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityServiceMockRecorder
}

// MockIdentityServiceMockRecorder is the mock recorder for MockIdentityService.
type MockIdentityServiceMockRecorder struct {
	mock *MockIdentityService
}

// NewMockIdentityService creates a new mock instance.
func NewMockIdentityService(ctrl *gomock.Controller) *MockIdentityService {
	mock := &MockIdentityService{ctrl: ctrl}
	mock.recorder = &MockIdentityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityService) EXPECT() *MockIdentityServiceMockRecorder {
	return m.recorder
}

// GetPairedDevices mocks base method.
func (m *MockIdentityService) GetPairedDevices(tokenID uint32) ([]models.PairedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairedDevices", tokenID)
	ret0, _ := ret[0].([]models.PairedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairedDevices indicates an expected call of GetPairedDevices.
func (mr *MockIdentityServiceMockRecorder) GetPairedDevices(tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairedDevices", reflect.TypeOf((*MockIdentityService)(nil).GetPairedDevices), tokenID)
}

// MockFingerprintService is a mock of FingerprintService interface.
type MockFingerprintService struct {
	ctrl     *gomock.Controller
	recorder *MockFingerprintServiceMockRecorder
}

// MockFingerprintServiceMockRecorder is the mock recorder for MockFingerprintService.
type MockFingerprintServiceMockRecorder struct {
	mock *MockFingerprintService
}

// NewMockFingerprintService creates a new mock instance.
func NewMockFingerprintService(ctrl *gomock.Controller) *MockFingerprintService {
	mock := &MockFingerprintService{ctrl: ctrl}
	mock.recorder = &MockFingerprintServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFingerprintService) EXPECT() *MockFingerprintServiceMockRecorder {
	return m.recorder
}

// GetLatestFingerprintMessages mocks base method.
func (m *MockFingerprintService) GetLatestFingerprintMessages(tokenID uint32) ([]models.FingerprintMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestFingerprintMessages", tokenID)
	ret0, _ := ret[0].([]models.FingerprintMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestFingerprintMessages indicates an expected call of GetLatestFingerprintMessages.
func (mr *MockFingerprintServiceMockRecorder) GetLatestFingerprintMessages(tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestFingerprintMessages", reflect.TypeOf((*MockFingerprintService)(nil).GetLatestFingerprintMessages), tokenID)
}

// MockVINService is a mock of VINService interface.
type MockVINService struct {
	ctrl     *gomock.Controller
	recorder *MockVINServiceMockRecorder
}

// MockVINServiceMockRecorder is the mock recorder for MockVINService.
type MockVINServiceMockRecorder struct {
	mock *MockVINService
}

// NewMockVINService creates a new mock instance.
func NewMockVINService(ctrl *gomock.Controller) *MockVINService {
	mock := &MockVINService{ctrl: ctrl}
	mock.recorder = &MockVINServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVINService) EXPECT() *MockVINServiceMockRecorder {
	return m.recorder
}

// ValidateVIN mocks base method.
func (m *MockVINService) ValidateVIN(vin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVIN", vin)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVIN indicates an expected call of ValidateVIN.
func (mr *MockVINServiceMockRecorder) ValidateVIN(vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVIN", reflect.TypeOf((*MockVINService)(nil).ValidateVIN), vin)
}
