// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=interfaces_mock_test.go -package=vinvc_test
//

// Package vinvc_test is a generated GoMock package.
package vinvc_test

import (
	context "context"
	reflect "reflect"

	models "github.com/DIMO-Network/attestation-api/internal/models"
	cloudevent "github.com/DIMO-Network/cloudevent"
	gomock "go.uber.org/mock/gomock"
)

// MockVCRepo is a mock of VCRepo interface.
type MockVCRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVCRepoMockRecorder
	isgomock struct{}
}

// MockVCRepoMockRecorder is the mock recorder for MockVCRepo.
type MockVCRepoMockRecorder struct {
	mock *MockVCRepo
}

// NewMockVCRepo creates a new mock instance.
func NewMockVCRepo(ctrl *gomock.Controller) *MockVCRepo {
	mock := &MockVCRepo{ctrl: ctrl}
	mock.recorder = &MockVCRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCRepo) EXPECT() *MockVCRepoMockRecorder {
	return m.recorder
}

// UploadAttestation mocks base method.
func (m *MockVCRepo) UploadAttestation(ctx context.Context, attestation *cloudevent.RawEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttestation", ctx, attestation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAttestation indicates an expected call of UploadAttestation.
func (mr *MockVCRepoMockRecorder) UploadAttestation(ctx, attestation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttestation", reflect.TypeOf((*MockVCRepo)(nil).UploadAttestation), ctx, attestation)
}

// MockIdentityAPI is a mock of IdentityAPI interface.
type MockIdentityAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityAPIMockRecorder
	isgomock struct{}
}

// MockIdentityAPIMockRecorder is the mock recorder for MockIdentityAPI.
type MockIdentityAPIMockRecorder struct {
	mock *MockIdentityAPI
}

// NewMockIdentityAPI creates a new mock instance.
func NewMockIdentityAPI(ctrl *gomock.Controller) *MockIdentityAPI {
	mock := &MockIdentityAPI{ctrl: ctrl}
	mock.recorder = &MockIdentityAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityAPI) EXPECT() *MockIdentityAPIMockRecorder {
	return m.recorder
}

// GetVehicleInfo mocks base method.
func (m *MockIdentityAPI) GetVehicleInfo(ctx context.Context, vehicleDID cloudevent.ERC721DID) (*models.VehicleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleInfo", ctx, vehicleDID)
	ret0, _ := ret[0].(*models.VehicleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleInfo indicates an expected call of GetVehicleInfo.
func (mr *MockIdentityAPIMockRecorder) GetVehicleInfo(ctx, vehicleDID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleInfo", reflect.TypeOf((*MockIdentityAPI)(nil).GetVehicleInfo), ctx, vehicleDID)
}

// MockFingerprintRepo is a mock of FingerprintRepo interface.
type MockFingerprintRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFingerprintRepoMockRecorder
	isgomock struct{}
}

// MockFingerprintRepoMockRecorder is the mock recorder for MockFingerprintRepo.
type MockFingerprintRepoMockRecorder struct {
	mock *MockFingerprintRepo
}

// NewMockFingerprintRepo creates a new mock instance.
func NewMockFingerprintRepo(ctrl *gomock.Controller) *MockFingerprintRepo {
	mock := &MockFingerprintRepo{ctrl: ctrl}
	mock.recorder = &MockFingerprintRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFingerprintRepo) EXPECT() *MockFingerprintRepoMockRecorder {
	return m.recorder
}

// GetLatestFingerprintMessages mocks base method.
func (m *MockFingerprintRepo) GetLatestFingerprintMessages(ctx context.Context, vehicle cloudevent.ERC721DID, pairedDeviceAddr models.PairedDevice) (*models.DecodedFingerprintData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestFingerprintMessages", ctx, vehicle, pairedDeviceAddr)
	ret0, _ := ret[0].(*models.DecodedFingerprintData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestFingerprintMessages indicates an expected call of GetLatestFingerprintMessages.
func (mr *MockFingerprintRepoMockRecorder) GetLatestFingerprintMessages(ctx, vehicle, pairedDeviceAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestFingerprintMessages", reflect.TypeOf((*MockFingerprintRepo)(nil).GetLatestFingerprintMessages), ctx, vehicle, pairedDeviceAddr)
}

// MockVINAPI is a mock of VINAPI interface.
type MockVINAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVINAPIMockRecorder
	isgomock struct{}
}

// MockVINAPIMockRecorder is the mock recorder for MockVINAPI.
type MockVINAPIMockRecorder struct {
	mock *MockVINAPI
}

// NewMockVINAPI creates a new mock instance.
func NewMockVINAPI(ctrl *gomock.Controller) *MockVINAPI {
	mock := &MockVINAPI{ctrl: ctrl}
	mock.recorder = &MockVINAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVINAPI) EXPECT() *MockVINAPIMockRecorder {
	return m.recorder
}

// DecodeVIN mocks base method.
func (m *MockVINAPI) DecodeVIN(ctx context.Context, vin, countryCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeVIN", ctx, vin, countryCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeVIN indicates an expected call of DecodeVIN.
func (mr *MockVINAPIMockRecorder) DecodeVIN(ctx, vin, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeVIN", reflect.TypeOf((*MockVINAPI)(nil).DecodeVIN), ctx, vin, countryCode)
}
