// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=interfaces_mock_test.go -package=vehiclehealthvc_test
//

// Package vehiclehealthvc_test is a generated GoMock package.
package vehiclehealthvc_test

import (
	context "context"
	reflect "reflect"

	telemetryapi "github.com/DIMO-Network/attestation-api/internal/client/telemetryapi"
	models "github.com/DIMO-Network/attestation-api/internal/models"
	cloudevent "github.com/DIMO-Network/cloudevent"
	gomock "go.uber.org/mock/gomock"
)

// MockVCRepo is a mock of VCRepo interface.
type MockVCRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVCRepoMockRecorder
	isgomock struct{}
}

// MockVCRepoMockRecorder is the mock recorder for MockVCRepo.
type MockVCRepoMockRecorder struct {
	mock *MockVCRepo
}

// NewMockVCRepo creates a new mock instance.
func NewMockVCRepo(ctrl *gomock.Controller) *MockVCRepo {
	mock := &MockVCRepo{ctrl: ctrl}
	mock.recorder = &MockVCRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCRepo) EXPECT() *MockVCRepoMockRecorder {
	return m.recorder
}

// UploadAttestation mocks base method.
func (m *MockVCRepo) UploadAttestation(ctx context.Context, attestation *cloudevent.RawEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttestation", ctx, attestation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAttestation indicates an expected call of UploadAttestation.
func (mr *MockVCRepoMockRecorder) UploadAttestation(ctx, attestation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttestation", reflect.TypeOf((*MockVCRepo)(nil).UploadAttestation), ctx, attestation)
}

// MockIdentityAPI is a mock of IdentityAPI interface.
type MockIdentityAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityAPIMockRecorder
	isgomock struct{}
}

// MockIdentityAPIMockRecorder is the mock recorder for MockIdentityAPI.
type MockIdentityAPIMockRecorder struct {
	mock *MockIdentityAPI
}

// NewMockIdentityAPI creates a new mock instance.
func NewMockIdentityAPI(ctrl *gomock.Controller) *MockIdentityAPI {
	mock := &MockIdentityAPI{ctrl: ctrl}
	mock.recorder = &MockIdentityAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityAPI) EXPECT() *MockIdentityAPIMockRecorder {
	return m.recorder
}

// GetVehicleInfo mocks base method.
func (m *MockIdentityAPI) GetVehicleInfo(ctx context.Context, vehicleDID cloudevent.ERC721DID) (*models.VehicleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleInfo", ctx, vehicleDID)
	ret0, _ := ret[0].(*models.VehicleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleInfo indicates an expected call of GetVehicleInfo.
func (mr *MockIdentityAPIMockRecorder) GetVehicleInfo(ctx, vehicleDID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleInfo", reflect.TypeOf((*MockIdentityAPI)(nil).GetVehicleInfo), ctx, vehicleDID)
}

// MockTelemetryAPI is a mock of TelemetryAPI interface.
type MockTelemetryAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryAPIMockRecorder
	isgomock struct{}
}

// MockTelemetryAPIMockRecorder is the mock recorder for MockTelemetryAPI.
type MockTelemetryAPIMockRecorder struct {
	mock *MockTelemetryAPI
}

// NewMockTelemetryAPI creates a new mock instance.
func NewMockTelemetryAPI(ctrl *gomock.Controller) *MockTelemetryAPI {
	mock := &MockTelemetryAPI{ctrl: ctrl}
	mock.recorder = &MockTelemetryAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryAPI) EXPECT() *MockTelemetryAPIMockRecorder {
	return m.recorder
}

// GetHistoricalDataWithAuth mocks base method.
func (m *MockTelemetryAPI) GetHistoricalDataWithAuth(ctx context.Context, options telemetryapi.TelemetryQueryOptions, jwtToken string) ([]telemetryapi.Signal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalDataWithAuth", ctx, options, jwtToken)
	ret0, _ := ret[0].([]telemetryapi.Signal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricalDataWithAuth indicates an expected call of GetHistoricalDataWithAuth.
func (mr *MockTelemetryAPIMockRecorder) GetHistoricalDataWithAuth(ctx, options, jwtToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalDataWithAuth", reflect.TypeOf((*MockTelemetryAPI)(nil).GetHistoricalDataWithAuth), ctx, options, jwtToken)
}
