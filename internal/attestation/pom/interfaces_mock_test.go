// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=interfaces_mock_test.go -package=pom_tests
//

// Package pom_tests is a generated GoMock package.
package pom_test

import (
	context "context"
	json "encoding/json"
	reflect "reflect"
	time "time"

	models "github.com/DIMO-Network/attestation-api/internal/models"
	verifiable "github.com/DIMO-Network/attestation-api/pkg/verifiable"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockVCRepo is a mock of VCRepo interface.
type MockVCRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVCRepoMockRecorder
}

// MockVCRepoMockRecorder is the mock recorder for MockVCRepo.
type MockVCRepoMockRecorder struct {
	mock *MockVCRepo
}

// NewMockVCRepo creates a new mock instance.
func NewMockVCRepo(ctrl *gomock.Controller) *MockVCRepo {
	mock := &MockVCRepo{ctrl: ctrl}
	mock.recorder = &MockVCRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCRepo) EXPECT() *MockVCRepoMockRecorder {
	return m.recorder
}

// GetLatestVINVC mocks base method.
func (m *MockVCRepo) GetLatestVINVC(ctx context.Context, tokenID uint32) (*verifiable.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVINVC", ctx, tokenID)
	ret0, _ := ret[0].(*verifiable.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVINVC indicates an expected call of GetLatestVINVC.
func (mr *MockVCRepoMockRecorder) GetLatestVINVC(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVINVC", reflect.TypeOf((*MockVCRepo)(nil).GetLatestVINVC), ctx, tokenID)
}

// StoreVINVC mocks base method.
func (m *MockVCRepo) StoreVINVC(ctx context.Context, tokenID uint32, vinvc json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreVINVC", ctx, tokenID, vinvc)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreVINVC indicates an expected call of StoreVINVC.
func (mr *MockVCRepoMockRecorder) StoreVINVC(ctx, tokenID, vinvc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreVINVC", reflect.TypeOf((*MockVCRepo)(nil).StoreVINVC), ctx, tokenID, vinvc)
}

// MockIdentityAPI is a mock of IdentityAPI interface.
type MockIdentityAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityAPIMockRecorder
}

// MockIdentityAPIMockRecorder is the mock recorder for MockIdentityAPI.
type MockIdentityAPIMockRecorder struct {
	mock *MockIdentityAPI
}

// NewMockIdentityAPI creates a new mock instance.
func NewMockIdentityAPI(ctrl *gomock.Controller) *MockIdentityAPI {
	mock := &MockIdentityAPI{ctrl: ctrl}
	mock.recorder = &MockIdentityAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityAPI) EXPECT() *MockIdentityAPIMockRecorder {
	return m.recorder
}

// GetVehicleInfo mocks base method.
func (m *MockIdentityAPI) GetVehicleInfo(ctx context.Context, tokenID uint32) (*models.VehicleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleInfo", ctx, tokenID)
	ret0, _ := ret[0].(*models.VehicleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleInfo indicates an expected call of GetVehicleInfo.
func (mr *MockIdentityAPIMockRecorder) GetVehicleInfo(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleInfo", reflect.TypeOf((*MockIdentityAPI)(nil).GetVehicleInfo), ctx, tokenID)
}

// MockConnectivityRepo is a mock of ConnectivityRepo interface.
type MockConnectivityRepo struct {
	ctrl     *gomock.Controller
	recorder *MockConnectivityRepoMockRecorder
}

// MockConnectivityRepoMockRecorder is the mock recorder for MockConnectivityRepo.
type MockConnectivityRepoMockRecorder struct {
	mock *MockConnectivityRepo
}

// NewMockConnectivityRepo creates a new mock instance.
func NewMockConnectivityRepo(ctrl *gomock.Controller) *MockConnectivityRepo {
	mock := &MockConnectivityRepo{ctrl: ctrl}
	mock.recorder = &MockConnectivityRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectivityRepo) EXPECT() *MockConnectivityRepoMockRecorder {
	return m.recorder
}

// GetAutoPiEvents mocks base method.
func (m *MockConnectivityRepo) GetAutoPiEvents(ctx context.Context, pairedDeviceIMEI string, after time.Time, limit int) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoPiEvents", ctx, pairedDeviceIMEI, after, limit)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoPiEvents indicates an expected call of GetAutoPiEvents.
func (mr *MockConnectivityRepoMockRecorder) GetAutoPiEvents(ctx, pairedDeviceIMEI, after, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoPiEvents", reflect.TypeOf((*MockConnectivityRepo)(nil).GetAutoPiEvents), ctx, pairedDeviceIMEI, after, limit)
}

// GetHashDogEvents mocks base method.
func (m *MockConnectivityRepo) GetHashDogEvents(ctx context.Context, pairedDeviceAddr common.Address, after time.Time, limit int) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashDogEvents", ctx, pairedDeviceAddr, after, limit)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashDogEvents indicates an expected call of GetHashDogEvents.
func (mr *MockConnectivityRepoMockRecorder) GetHashDogEvents(ctx, pairedDeviceAddr, after, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashDogEvents", reflect.TypeOf((*MockConnectivityRepo)(nil).GetHashDogEvents), ctx, pairedDeviceAddr, after, limit)
}

// GetStatusEvents mocks base method.
func (m *MockConnectivityRepo) GetStatusEvents(ctx context.Context, vehicleTokenID uint32, after time.Time, limit int) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusEvents", ctx, vehicleTokenID, after, limit)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusEvents indicates an expected call of GetStatusEvents.
func (mr *MockConnectivityRepoMockRecorder) GetStatusEvents(ctx, vehicleTokenID, after, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusEvents", reflect.TypeOf((*MockConnectivityRepo)(nil).GetStatusEvents), ctx, vehicleTokenID, after, limit)
}

// MockVINAPI is a mock of VINAPI interface.
type MockVINAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVINAPIMockRecorder
}

// MockVINAPIMockRecorder is the mock recorder for MockVINAPI.
type MockVINAPIMockRecorder struct {
	mock *MockVINAPI
}

// NewMockVINAPI creates a new mock instance.
func NewMockVINAPI(ctrl *gomock.Controller) *MockVINAPI {
	mock := &MockVINAPI{ctrl: ctrl}
	mock.recorder = &MockVINAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVINAPI) EXPECT() *MockVINAPIMockRecorder {
	return m.recorder
}

// DecodeVIN mocks base method.
func (m *MockVINAPI) DecodeVIN(ctx context.Context, vin, countryCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeVIN", ctx, vin, countryCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeVIN indicates an expected call of DecodeVIN.
func (mr *MockVINAPIMockRecorder) DecodeVIN(ctx, vin, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeVIN", reflect.TypeOf((*MockVINAPI)(nil).DecodeVIN), ctx, vin, countryCode)
}

// MockIssuer is a mock of Issuer interface.
type MockIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockIssuerMockRecorder
}

// MockIssuerMockRecorder is the mock recorder for MockIssuer.
type MockIssuerMockRecorder struct {
	mock *MockIssuer
}

// NewMockIssuer creates a new mock instance.
func NewMockIssuer(ctrl *gomock.Controller) *MockIssuer {
	mock := &MockIssuer{ctrl: ctrl}
	mock.recorder = &MockIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuer) EXPECT() *MockIssuerMockRecorder {
	return m.recorder
}

// CreatePOMVC mocks base method.
func (m *MockIssuer) CreatePOMVC(vinSubject verifiable.POMSubject, expTime time.Time) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePOMVC", vinSubject, expTime)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePOMVC indicates an expected call of CreatePOMVC.
func (mr *MockIssuerMockRecorder) CreatePOMVC(vinSubject, expTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePOMVC", reflect.TypeOf((*MockIssuer)(nil).CreatePOMVC), vinSubject, expTime)
}
